<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    1class 类 本质还是fuction
    2类的所有方法都定义在类的prototype属性上
    3类创建的实例 里面也有__proto__对象原型 指向类的prototype原型对象
    4所有ES6的类,它的绝大部分功能 ES5都可以做到 新的class写法只是让对象原型的写法更加清晰 更像面向对象的编程而已
    5所以ES6的类 其实就是语法糖
    6语法糖 语法糖就是一种便携写法 简单理解 有两种方法可以实现同样的功能 但是一种写法更加清晰 方便 那么这个方法就是语法糖
    <script>
        // ES6之前 通过构造函数+原型 实现面向对象 编程
        // (1) 构造函数有原型对象 prototype
        // (2)构造函数原型对象prototype 里面有constructor 指向构造函数本身
        // (3)构造函数  可以通过原型对象添加方法
        // (4)构造函数创建的实例对象 __proto__原型指向  构造函数的原型对象
        // ES6通过 类  实现面向对象编程
        class Star {

        }
        console.log(typeof Star);
        // 1类的本质其实还是一个函数   我们可以任务 类就是构造函数的领域自写法
        // (1) 类有原型对象 prototype
        console.log(Star.prototype);
        // (2)类原型对象prototype 里面有constructor 指向类本身
        console.log(Star.prototype.constructor);
        // (3)类  可以通过原型对象添加方法
        Star.prototype.sing = function () {
            console.log('冰雨');
        }
        var ldh = new Star();
        console.dir(ldh);
        // console.dir 打印我们返回的元素对象
        // (4)类创建的实例对象 __proto__原型指向  类的原型对象
        console.log(ldh.__proto__ === Star.prototype);
        // 语法糖解释
        // i = i + 1; i++; 
    </script>
</body>

</html>