<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    严格模式中的变化
    严格模式对JavaScript的语法和行为，都做了一些改变
    1变量规定
    （1）在正常模式下 如果一个变量 没有声明就赋值 默认是全局变量 严格模式禁止这种用法 变量都是必须先用var声明 然后再使用
    （2）严禁删除严禁声明的变量 例如delete x 语法是错误的
    2严格模式下this指向问题
    （1）以前在全局作用域函数中的this指向window对象
    （2）在严格模式下全局作用域中的函数中的this指向的是undefined
    (3) 以前构造函数时 不加new也可以调用 当普通函数 this指向全局对象
    3函数变化
    （1）函数不能有重名的参数
    （2）函数必须声明在顶层  新版本的JavaScript会引入块级作用域（es6中已引入）为了与新版本接轨 不允许在非函数的代码块内声明函数
    <script>
        'use strict';
        // 1我们的变量名 必须先声明再使用
        // num=10;
        // console.log(num);
        var num = 10;
        console.log(num);
        
        // 2我们不能随意删除已经声明好的变量
        // delete num;

        // 3严格模式下全局作用域中函数的this是undefined
        // function fn(){
        //     console.log(this);//undefined
        // }
        // fn();

        // 4在严格模式下 如果构造函数 不加new调用  this指向的是undefined， 如果给他赋值会报错
        // function Star() {
        //     this.sex = '男';
        // }
        // Star();
        // console.log(window.sex);
        // new 实例化的构造函数 指向创建的对象实例
    //    var ldh= new Star();
    //    console.log(ldh.sex);

    // 5定时器里面的this 指向的还是window
    // 事件 对象 还是指向调用者
    // setTimeout(function(){
    //     console.log(this);
    // },2000)
    // a=1 a=2  后面覆盖掉了前面

    // 6严格模式下，函数里面的参数，不允许有重名
    // function fn(a,a){
    //     console.log(a+a);
    // }
    // fn(1,2);

   
    function fn(){

    }
    </script>
</body>

</html>