<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    prototype 构造函数原型
    构造函数通过原型分配的函数 是所有对象所共享的
    JavaScript规定 每一个构造函数 都有一个prototype属性 指向另一个对象 注意这个prototype就是一个对象
    这个对象的所有属性和方法 都会被构造函数所拥有
    我们可以把那些不变的方法 直接定义在prototype对象上 这样所有对象的实例就可以共享这些方法
    <script>
        function Star(uname, age) {
            this.uname = uname;
            this.age = age;
            // this.sing = function () {
            //     console.log("我会唱歌");
            // }

        }
        Star.prototype.sing = function () {
            console.log("我会唱歌");
        }
        var ldh = new Star('ldh', 18);
        var zxy = new Star('张学友', 18);
        console.log(ldh.sing === zxy.sing);
        // console.dir(Star)
        ldh.sing();
        zxy.sing();
        // 一般情况下，我们的公共属性定义到构造函数里面 公共的方法 我们放到原型对象身上
        // 原型是什么
        // 一个对象   我们称为prototype为原型对象
        // 原型的作用是什么
        // 共享方法
        // 对象原型 __proto__  _ _proto_ _
        // 对象都会有一个属性__proto__ 指向构造函数的prototype原型对象  之所以我们的对象可以使用构造函数
        // prototype原型对象的属性和方法  就是因为对象有__proto__原型存在
        console.log(ldh);//对象身上系统自己添加一个__proto__指向我们构造函数的原型对象
        console.log(ldh.__proto__ === Star.prototype);
        // 方法的查找规则
        // 先看ldh对象身上是否有sing方法 如果有就执行这个对象的sing
        // 如果有sing这个方法  因为有__proto__的存在就去构造函数原型对象prototype身上查找sing这个方法
        
    </script>
</body>

</html>