<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    js执行机制
    1 js是单线程
    JavaScript语言的一大特定=点就是单线程 也就是说同一时间只能做一件事 这是因为JavaScript这门脚本
    语言 诞生的使命所致----JavaScript是为处理页面中用户的交互 以及操作DOM而诞生的
    比如我们对某个DOM元素进行添加和删除操作 不能同时进行 应该先进行添加 之后在删除
    单线程就意味着 所有的任务都需要排队 前一个任务结束才会执行后一个任务，这样所导致的问题是，如果js
    执行时间过长，就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉
    为了解决这个问题，利用多核cpu的计算能力，html5提出web worker标准
    允许javascript脚本创建多个线程，于是 js中出现了同步和异步
    同步
    前一个任务结束后，再去执行后一个任务，程序执行的结果与排列的顺序是一致的
    异步，
    你在做一件事情的同时，因为这件事会花费很长时间，你可以先去做别的事
    他们本质的区别在于 这条流水线上各个流程执行顺序不同
    <script>
        console.log(1);
        setTimeout(() => {
            console.log(3);
        }, 0);
        console.log(2);
        // 为了防止任务有一个排队或者是等待时间较长的问题，把所有的任务分成了两大类
        // 第一步叫同步任务，第二个叫异步任务
        // 同步任务  都在主线程上执行，形成一个执行栈
        // 任务
        //  js的异步是通过回调函数实现的
        //  一般而言，异步任务有一下三种类型
        //  1普通事件  如click resize等
        //  2资源加载  如load  error等
        //  3定时器包括  setInterval   setTimeout等
        // 异步任务相关回调函数添加到任务队列中，（任务队列也称为消息队列）
        // js执行机制
        // 1 先执行执行栈中的同步任务
        // 2  异步任务（回调函数）放入任务队列中
        // 3  一旦执行栈中的同步任务执行完毕，系统会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，
        // 进入执行栈，开始执行
        // 由于主线程不断的重复获得任务，执行任务，再获取任务，再执行，所以这种机制被称为事件循环（event loop）
    </script>
</body>

</html>